# This guide has been update for LUKS+hardened, hardened and regular install using seperate /boot
# It's highly recommended that you go through it once before executing stuff.
#
# Boot install CD (i.e. Gentoo 12.1 LiveDVD)
#

#create /boot on /dev/sda1
mkfs.ext2 /dev/sda1

#create another partition for zfs i.e. /dev/sda2 
#if using single drive for installation than use all the available space keeping aside space for swap if needed

#setup encrypted partition
#aes-xts-plain64 was chosen due to speed, xts-essiv SHOULD be more secure but about half as slow, on aes-ni I was getting about 450MBps
cryptsetup luksFormat -l 512 -c aes-xts-plain64 -h sha512 /dev/sda2
cryptsetup luksOpen /dev/sda2 cryptroot


# Using LUKS than create the required parition for zfs

zpool create -f -o ashift=12 -o cachefile=/tmp/zpool.cache -O normalization=formD -m none -R /mnt/gentoo rpool /dev/mapper/cryptroot


# Not using LUKS than create the required partition for zfs

zpool create -f -o ashift=12 -o cachefile=/tmp/zpool.cache -O normalization=formD -m none -R /mnt/gentoo rpool /dev/sda2

# Create rootfs
zfs create -o mountpoint=none rpool/ROOT
zfs create -o mountpoint=/ rpool/ROOT/gentoo

# Create home directories
zfs create -o mountpoint=/home rpool/HOME
zfs create -o mountpoint=/root rpool/HOME/root
#replace USER with your username
#chown will need to be done on user home dir
zfs create -o mountpoint=/home/USER rpool/HOME/USER

# Create portage directories
zfs create -o mountpoint=none rpool/GENTOO
zfs create -o mountpoint=/usr/portage rpool/GENTOO/portage
zfs create -o mountpoint=/usr/portage/distfiles rpool/GENTOO/distfiles

# Create portage build directory
# If compression=lz4 fails then use compression=on
zfs create -o mountpoint=/var/tmp/portage -o compression=lz4 -o sync=disabled rpool/GENTOO/build-dir

# Create optional packages directory
zfs create -o mountpoint=/usr/portage/packages rpool/GENTOO/packages

# Create optional ccache directory
# If compression=lz4 fails then use compression=on
zfs create -o mountpoint=/var/tmp/ccache -o compression=lz4 rpool/GENTOO/ccache

# select any one of the following stage3 tar's
# Download stage3
wget ftp://gentoo.osuosl.org/pub/gentoo/releases/amd64/current-stage3/stage3-amd64-*.tar.bz2
# Download stage3 for hardened
wget ftp://gentoo.osuosl.org/pub/gentoo/releases/amd64/current-stage3/hardened/stage3-amd64-hardened-*.tar.bz2

# Extract stage3
tar -xf stage3-amd64-*.tar.bz2 -C /mnt/gentoo

# Copy zpool.cache into chroot
mkdir -p /mnt/gentoo/etc/zfs
cp /tmp/zpool.cache /mnt/gentoo/etc/zfs/zpool.cache

# Copy resolv.conf into chroot
cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf

# Mount filesystems
mount -t proc none /mnt/gentoo/proc
mount --rbind /dev /mnt/gentoo/dev
mount --rbind /sys /mnt/gentoo/sys

# chroot
chroot /mnt/gentoo /bin/bash
env-update; source /etc/profile; export PS1="(chroot) $PS1"; cd

# Get portage snapshot
emerge --sync

# Install genkernel
emerge sys-kernel/genkernel

# Install sources any one of them
emerge sys-kernel/gentoo-sources
#             or
emerge sys-kernel/hardened-sources

# Build initial kernel (required for checks in sys-kernel/spl and sys-fs/zfs)
# FIXME: Make genkernel support modules_prepare
genkernel kernel --no-clean --no-mountboot

# Install ZFS
echo "sys-kernel/spl ~amd64" >> /etc/portage/package.accept_keywords
echo "sys-fs/zfs-kmod ~amd64" >> /etc/portage/package.accept_keywords
echo "sys-fs/zfs ~amd64" >> /etc/portage/package.accept_keywords
emerge sys-fs/zfs

# Add zfs to boot runlevel
rc-update add zfs boot

# Install gptfdisk
emerge sys-apps/gptfdisk

#
# Use gdisk to make partition 2 a BIOS boot partition (type EF02) from sectors 48 to 2047
#

# Flush the pool to ensure that GRUB2 is happy
exit
umount -l /mnt/gentoo/proc /mnt/gentoo/dev /mnt/gentoo/sys
zpool export rpool
zpool import -f -o cachefile=/tmp/zpool.cache -R /mnt/gentoo rpool
mount -t proc none /mnt/gentoo/proc
mount --rbind /dev /mnt/gentoo/dev
mount --rbind /sys /mnt/gentoo/sys
chroot /mnt/gentoo /bin/bash
env-update; source /etc/profile; export PS1="(chroot) $PS1"; cd

# Install GRUB2
echo "sys-boot/grub:2 libzfs" >> /etc/portage/package.use
echo "sys-boot/grub:2 ~amd64" >> /etc/portage/package.accept_keywords
emerge sys-boot/grub:2
touch /etc/mtab
grub2-install /dev/sda

# Build kernel and initramfs
genkernel all --no-clean --no-mountboot --zfs --bootloader=grub2 --callback="emerge @module-rebuild"
grub2-mkconfig -o /boot/grub/grub.cfg   # gentoo now uses /boot/grub/ instead of /boot/grub2/

# /boot entry in /etc/fstab
/dev/sda1 /boot ext2 defaults,noatime 0 2

#
# Comment the ROOT and SWAP lines in /etc/fstab
#

#kernel line for grub2, libzfs support is not needed in grub2 because you are not mounting the filesystem directly.

linux  /kernel-3.11.7-gentoo root=ZFS=rpool/ROOT/gentoo crypt_root=/dev/sda2 dozfs=force ro
initrd /initramfs-genkernel-x86_64-3.11.7

#kernel line if not using LUKS

linux  /kernel-3.5.0-gentoo root=ZFS=rpool/ROOT/gentoo ro 
initrd /initramfs-genkernel-x86_64-3.11.7

#
# Follow chapters 8 through 12 of Gentoo Handboook: http://www.gentoo.org/doc/en/handbook/
#

# Make recovery snapshot after booting into new install
zfs snapshot rpool/ROOT/gentoo@install

# Additional tips

# ARC tuning - You can configure the RAM that ARC uses in bytes
echo options zfs zfs_arc_max=536870912 >> /etc/modprobe.d/zfs.conf

# Set portage niceness to minimize potential for updates to cause lag
echo PORTAGE_NICENESS=19 >> /etc/make.conf

# Set portage to compile in a CGROUP to minimize lag
cat << END > /usr/local/sbin/portage-cgroup
#!/bin/sh
# $1 must be the portage PID

cgroup=$(mktemp -d --tmpdir=/sys/fs/cgroup/cpu portage-XXXX) &&
echo $1 > "${cgroup}/tasks" &&
echo 1 > "${cgroup}/notify_on_release"
echo 256 > "${cgroup}/cpu.shares"
END
chmod u+x /usr/local/sbin/portage-cgroup
echo 'PORTAGE_IONICE_COMMAND="/usr/local/sbin/portage-cgroup \${PID}"' >> /etc/make.conf

# Swap support
zfs create -o sync=always -o primarycache=metadata -o secondarycache=none -b 4K -V 8G rpool/swap
mkswap -f /dev/zvol/rpool/swap
zfs snapshot rpool/swap@install
# Edit fstab to use swap here

#
# Note: Integrate `zfs create -o mountpoint=/home/user rpool/HOME/user` into procedure
#

